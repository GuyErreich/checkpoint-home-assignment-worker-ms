name: CI

on:
  workflow_dispatch:
    
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Ruff linter
      run: |
        ruff check .

    - name: Run Ruff formatter check
      run: |
        ruff format --check .

    - name: Run type checking with mypy
      run: |
        mypy src/

    - name: Run tests with pytest and coverage
      run: |
        pytest -v --tb=short

    - name: Generate coverage badge
      run: |
        coverage-badge -f -o coverage-badge.svg

    - name: Create Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # Extract test count from pytest results
        if [ -f pytest-results.xml ]; then
          TESTS=$(grep -o 'tests="[0-9]*"' pytest-results.xml | grep -o '[0-9]*' || echo "N/A")
          FAILURES=$(grep -o 'failures="[0-9]*"' pytest-results.xml | grep -o '[0-9]*' || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' pytest-results.xml | grep -o '[0-9]*' || echo "0")
          echo "| 🧪 Total Tests | $TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $((TESTS - FAILURES - ERRORS)) |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $FAILURES |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚠️ Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Extract coverage from coverage.xml
        if [ -f coverage.xml ]; then
          COVERAGE=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' || echo "N/A")
          echo "| 📊 Coverage | $COVERAGE |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📈 **Coverage Badge**: ![Coverage](./coverage-badge.svg)" >> $GITHUB_STEP_SUMMARY

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          pytest-results.xml

    - name: Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Archive test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage-results
        path: |
          htmlcov/
          coverage.xml
          coverage-badge.svg
          pytest-results.xml
          code-coverage-results.md
        retention-days: 30

    - name: Archive coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 30

    - name: Test Docker build
      run: |
        docker build -t test-app .
